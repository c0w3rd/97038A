#pragma region VEXcode Generated Robot Configuration
// Make sure all required headers are included.
#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#include <math.h>
#include <string.h>


#include "vex.h"

using namespace vex;

// Brain should be defined by default
brain Brain;


// START V5 MACROS
#define waitUntil(condition)                                                   \
  do {                                                                         \
    wait(5, msec);                                                             \
  } while (!(condition))

#define repeat(iterations)                                                     \
  for (int iterator = 0; iterator < iterations; iterator++)
// END V5 MACROS


// Robot configuration code.
controller Controller1 = controller(primary);
motor Motor1 = motor(PORT1, ratio18_1, false);

motor Motor2 = motor(PORT2, ratio18_1, false);

motor Motor3 = motor(PORT3, ratio18_1, false);

motor Motor4 = motor(PORT4, ratio18_1, false);




// define variable for remote controller enable/disable
bool RemoteControlCodeEnabled = true;
#pragma endregion VEXcode Generated Robot Configuration

/*----------------------------------------------------------------------------*/
/*                                                                            */
/*    Module:       main.cpp                                                  */
/*    Author:       {author}                                                  */
/*    Created:      {date}                                                    */
/*    Description:  V5 project                                                */
/*                                                                            */
/*----------------------------------------------------------------------------*/

// Include the V5 Library
#include "vex.h"
  
// Allows for easier use of the VEX Library
using namespace vex;

int main() {
  Motor1.spin(forward);
  Motor2.spin(forward);
  Motor3.spin(forward);
  Motor4.spin(forward);

  //Variable declaration
  float C1P; //Controller 1 Axis 1
  float C3P; //Controller 1 Axis 2
  
  float M1T; //Motor 1 Temperature (percentage)
  float M2T; //Motor 2 Temperature (percentage)
  float M3T; //Motor 3 Temperature (percentage)
  float M4T; //Motor 4 Temperature (percentage)

  void newline() {
    Brain.Screen.newLine();
  }

  void variables() {
    //Controller axis
    C1P = Controller1.Axis1.position();
    C3P = Controller1.Axis3.position();

    //Motor temperatures
    M1T = Motor1.temperature(percent);
    M2T = Motor2.temperature(percent);
    M3T = Motor3.temperature(percent);
    M4T = Motor4.temperature(percent);
  }

  void logging(x, y, z, a) {
    Brain.Screen.clearScreen();
    Brain.Screen.print(x);
    newline();
    Brain.Screen.print(y);
    newline();
    Brain.Screen.print(z);
    newline();
    Brain.Screen.print(a);
    newline();
    wait(1, seconds);
  }

  while(true) {
    variables();

    //side 1
    Motor1.setVelocity((C3P + C1P)/2);
    Motor3.setVelocity((C3P + C1P)/2);

    //side 2
    Motor2.setVelocity(C3P - C1P)/2);
    Motor4.setVelocity(C3P - C1P)/2);
    wait(10, msec);
    thread Thread2 = thread(logging(M1T, M2T, M3T, M4T));
  }
}
